/*
// specifies the number of threads to be used by OpenMP parallel regions in the program.
// OMP_NUM_THREADS : environment variable
// OMP_NUM_THREADS=4 : 4 indicates that the program intends to utilize 4 threads for parallel execution.
export OMP_NUM_THREADS=4

g++ -fopenmp bubblesort.cpp
./a.out
*/
#include <omp.h>
#include<bits/stdc++.h>
using namespace std;
 
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
 
void bfs(TreeNode* root) {
    queue<TreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        TreeNode* node = q.front();
        q.pop();
        cout << node->val << " ";
        if (node->left) {
            q.push(node->left);
        }
        if (node->right) {
            q.push(node->right);
        }
    }
}

 
void parallel_bfs(TreeNode* root) {
    queue<TreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        int qSize = q.size();
        #pragma omp parallel for
        for (int i = 0; i < qSize; i++) {
            TreeNode* node;
            #pragma omp critical
            {
                node = q.front();
                q.pop();
                cout << node->val << " ";
            }
            if (node->left)  q.push(node->left);        
            if (node->right) q.push(node->right);
        }
    }
}
 
TreeNode* createUserInputTree() {
    int val;
    cout << "Enter the value for the root node: ";
    cin >> val;
    TreeNode* root = new TreeNode(val);

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* node = q.front();
        q.pop();

        int leftVal, rightVal;
        cout << "Enter the value for the left child of node " << node->val << " (or -1 if there is no left child): ";
        cin >> leftVal;
        if (leftVal != -1) {
            node->left = new TreeNode(leftVal);
            q.push(node->left);
        }

        cout << "Enter the value for the right child of node " << node->val << " (or -1 if there is no right child): ";
        cin >> rightVal;
        if (rightVal != -1) {
            node->right = new TreeNode(rightVal);
            q.push(node->right);
        }

        int continueVal;
        cout << "Enter -1 to stop adding nodes, or any other value to continue: ";
        cin >> continueVal;
        if (continueVal == -1) {
            break;
        }
    }

    return root;
}


int main() {
    // TreeNode* root = new TreeNode(1);
    // root->left = new TreeNode(2);
    // root->right = new TreeNode(3);
    // root->left->left = new TreeNode(4);
    // root->left->right = new TreeNode(5);
    // root->right->left = new TreeNode(6);
    // root->right->right = new TreeNode(7);

    TreeNode* root = createUserInputTree();
 
    cout << "BFS traversal: ";
    double start = omp_get_wtime();
    bfs(root);
    double end = omp_get_wtime();
    cout << "\nBFS took " << end-start << " seconds." << endl;
    cout << endl;
 
    cout << "Parallel BFS traversal: ";
    //start = omp_get_wtime();
    parallel_bfs(root);
    //start = omp_get_wtime();
    //cout << "\nParallel BFS took " << end-start << " seconds." << endl;
     cout << endl;
    cout << "---------------------------------------------------------"<<endl;
 
    return 0;
}

// Time Complexity: O(N)  -  visits every node in the tree exactly once
