/*
export OMP_NUM_THREADS=4
g++ -fopenmp bubblesort.cpp
./a.out
*/

#include <iostream>
#include <ctime>
#include <algorithm>

// compares adjacent elements, swapping them if not sorted
void sequentialBubbleSort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void parallelBubbleSort(int arr[], int n) {
    int i, j;
    /* 
    - directive #pragma omp parallel for to parallelize the outer loop private(i, j) clause ensures that each thread has its private copy of loop variables i and j, while the shared(arr) clause indicates that the array arr is shared among all threads.
    - multiple threads work on different sections of the array simultaneously.
    */
    #pragma omp parallel for private(i, j) shared(arr)
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void generateArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % size;
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

int main() {
    const int size = 10000;
    int arr[size];

    generateArray(arr, size);
    
    int arr1[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr1) / sizeof(arr1[0]);

    int parallelarr[size];
    std::copy(arr, arr + size, parallelarr);

    //double startTime = omp_get_wtime();
    sequentialBubbleSort(arr, size);
    // double endTime = omp_get_wtime();
    // double sequentialTime = endTime - startTime;

    // startTime = omp_get_wtime();
    parallelBubbleSort(parallelarr, size);
    // endTime = omp_get_wtime();
    // double parallelTime = endTime - startTime;

    std::cout << "Sequential Sorted Array:" << std::endl;
    printArray(arr, size);
    //std::cout << "Time for Sequential Sort: " << sequentialTime << std::endl;

    std::cout << "Parallel Sorted Array:" << std::endl;
    printArray(parallelarr, size);
    //std::cout << "Time for Parallel Sort: " << parallelTime << std::endl;

    return 0;
}
