!pip install git+https://github.com/Supriya079/cuda.git
%load_ext nvcc_plugin

%%cu
#include <stdio.h>

// Matrix dimensions
#define N 3

// CUDA kernel for matrix multiplication
__global__ void matrixMul(int *a, int *b, int *c)
{
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < N && col < N) {
        int sum = 0;
        for (int k = 0; k < N; ++k)
            sum += a[row * N + k] * b[k * N + col];
        c[row * N + col] = sum;
    }
}

int main()
{
    // Matrix variables
    int *h_a, *h_b, *h_c;
    int *d_a, *d_b, *d_c;
    int size = N * N * sizeof(int);

    // Allocate host memory
    h_a = (int*)malloc(size);
    h_b = (int*)malloc(size);
    h_c = (int*)malloc(size);

    // Initialize matrices
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            h_a[i * N + j] = i + j;
            h_b[i * N + j] = i - j;
        }
    }
 
    printf("Matrix A:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j)
            printf("%d ", h_a[i * N + j]);
        printf("\n");
    }
 
    printf("Matrix B:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j)
            printf("%d ", h_b[i * N + j]);
        printf("\n");
    }

    // Allocate device memory
    cudaMalloc(&d_a, size);
    cudaMalloc(&d_b, size);
    cudaMalloc(&d_c, size);

    // Transfer data from host to device
    cudaMemcpy(d_a, h_a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, h_b, size, cudaMemcpyHostToDevice);

    // Set grid and block dimensions
    dim3 dimGrid(1, 1);
    dim3 dimBlock(N, N);

    // Launch the CUDA kernel
    matrixMul<<<dimGrid, dimBlock>>>(d_a, d_b, d_c);

    // Transfer data from device to host
    cudaMemcpy(h_c, d_c, size, cudaMemcpyDeviceToHost);

    // Print the result
    printf("Matrix C:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j)
            printf("%d ", h_c[i * N + j]);
        printf("\n");
    }

    // Free memory
    free(h_a);
    free(h_b);
    free(h_c);
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    return 0;
}
