!pip install git+https://github.com/Supriya079/cuda.git

// enables the integration of CUDA code into Jupyter notebooks to execute CUDA code using NVDIA Compiler.
%load_ext nvcc_plugin

%%cu
#include <iostream>
#include <omp.h>
using namespace std;

void generateArray(int arr[], int size){
    for(int i=0;i<size;i++){
        arr[i] = rand() % size;
    }
}

void printArray(int arr[], int size){
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

int maxArray(int arr[], int size){
    int max_val = arr[0];
    /*
    - " #pragma omp parallel for " directive used to parallize loop dividing the iterations among multiple threads for concurrent execution.
    - " reduction(max:max_val) " clause specifies that each thread should maintain a local copy of max_val
    */    
    #pragma omp parallel for reduction(max:max_val)
    for(int i=0;i<size;i++){
        if(arr[i]>max_val){
            max_val = arr[i];
        }
    }
    return max_val;
}

int main(){
    const int size = 10000;
    int arr[size];
    generateArray(arr,size);
    printArray(arr,size);

    int arr1[] = {23, 56, 12, 67, 34, 90, 18, 41};
    int n = sizeof(arr1) / sizeof(arr1[0]);
    
    cout<<"Minimum: "<<maxArray(arr,size)<<endl;
}
